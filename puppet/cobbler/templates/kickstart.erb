#platform=x86, AMD64, or Intel EM64T
#System authorization infomation
authconfig --enableshadow --passalgo=sha512

# Use text mode install
text
# Firewall configuration
firewall --enabled --port=123:udp
firewall --disabled
services --disabled=firewalld,chronyd,NetworkManager
services --enabled=iptables,ip6tables,serial-getty@ttyS0
# Run the Setup Agent on first boot
firstboot --enable
# System keyboard
keyboard <%= @keyboard %>
# System language
lang en_US
# Use network installation
url --url=$tree
#LITP repo
repo --name=3PP --baseurl=http://$http_server/3pp_<%= @os_version %>
#UPDATES repo
repo --name=UPDATES --baseurl=http://$http_server/7/updates/x86_64/Packages
# Network information
$SNIPPET('network_config')
# Reboot after installation
reboot

#Root password
rootpw --iscrypted $default_password_crypted
user --name litp-admin --password $default_node_litp_admin_pass --iscrypted
# SELinux configuration
selinux --<%= @selinux_mode %>
# Do not configure the X Window System
skipx
# System timezone
timezone <%= @timezone %>
# Install OS instead of upgrade
install
# Clear the Master Boot Record
zerombr

# Use partition information generated by LITP
<%= @partitioninfo %>

# System bootloader configuration
%include /tmp/bootloader.info

%pre --erroronfail
$SNIPPET('log_ks_pre')
$SNIPPET($hostname + '.ks.partition.snippet')
$SNIPPET($hostname + '.ks.bootloader.snippet')
$SNIPPET('kickstart_start')
$SNIPPET('pre_install_network_config')
# Enable installation monitoring
$SNIPPET('pre_anamon')
%end


%packages --nobase
@Core
-biosdevname
rsyslog
-firewalld
$SNIPPET('puppet_install_if_enabled')
wget
ntp
lsof
man-db
screen
strace
tcpdump
pexpect
policycoreutils-python
nfs-utils
openssh-clients
ipmitool
tmpwatch
device-mapper-multipath
device-mapper-multipath-libs
kpartx
pciutils
libaio
ltrace
traceroute
bind-utils
sysstat
vim-common
vim-enhanced
qemu-kvm
virt-install
procmail
procps-ng
bridge-utils
kexec-tools
yum-utils
mcollective-puppet-agent
mcollective-service-common
mcollective
mcollective-puppet-common
mcollective-common
mcollective-service-agent
yum-plugin-versionlock
-chronyd
iptables-services
bc
numactl
-NetworkManager
-NetworkManager-team
-NetworkManager-tui
-NetworkManager-config-server
<% if @boot_mode == "uefi" -%>
gdisk
parted
efibootmgr
<% end -%>
%end

%post --log=/var/log/ks-post.log --erroronfail

<% if @boot_mode == "uefi" && @add_lvm_conf == "true" -%>
sed -i 's/^#lvmconf="no"/lvmconf="yes"/; s/^#add_dracutmodules+=""/add_dracutmodules+="multipath lvm"/' /etc/dracut.conf
lvm_conf=/etc/lvm/lvm.conf
grep -v "#" \${lvm_conf} | grep "filter ="
if [ $? != 0 ]; then
    sed -i '0,/# filter = .*\$/s//filter = [ "a\|\/dev\/mapper\/mpath.*|", "r\|.*\|" ]/' \${lvm_conf}
else
    if [ $? == 0 ]; then
        sed -i '0,/ filter = .*\$/s//filter = [ "a\|\/dev\/mapper\/mpath.*|", "r\|.*\|" ]/' \${lvm_conf}
    fi
fi
grep -v "#" \${lvm_conf} | grep "global_filter ="
if [ $? != 0 ]; then
    sed -i '0,/# global_filter = .*\$/s//global_filter = [ "a\|\/dev\/mapper\/mpath.*|", "r\|.*\|" ]/' \${lvm_conf}
else
    if [ $? == 0 ]; then
        sed -i '0,/ global_filter = .*\$/s//global_filter = [ "a\|\/dev\/mapper\/mpath.*|", "r\|.*\|" ]/' \${lvm_conf}
    fi
fi
kver=`rpm -q kernel|sort|head -1`
initramfs=`echo \$kver |sed -e 's/kernel/initramfs/'`.img
dracut -f --lvmconf /boot/\${initramfs} `echo \$kver | sed -e 's/kernel-//'`
<% end -%>

<% if @openstack_env == "true" -%>
sed -i 's/^\(\s*\)\(\(filter\|global_filter\) = \)\[\([^]]*\) \].*$/\1\2[ "a\|\/dev\/sd.*\|", \4 ]/g' /etc/lvm/lvm.conf
<% end -%>


systemctl disable NetworkManager
systemctl stop NetworkManager

# add OS yum repo config
echo "[OS]" > /etc/yum.repos.d/OS.repo
echo "name = RHEL OS" >> /etc/yum.repos.d/OS.repo
echo "baseurl = http://$http_server/7/os/x86_64/Packages" >> /etc/yum.repos.d/OS.repo
echo "enabled = 1" >> /etc/yum.repos.d/OS.repo
echo "gpgcheck = 0" >> /etc/yum.repos.d/OS.repo

# add UPDATES yum repo config
echo "[UPDATES]" > /etc/yum.repos.d/UPDATES.repo
echo "name = RHEL Updates" >> /etc/yum.repos.d/UPDATES.repo
echo "baseurl = http://$http_server/7/updates/x86_64/Packages" >> /etc/yum.repos.d/UPDATES.repo
echo "enabled = 1" >> /etc/yum.repos.d/UPDATES.repo
echo "gpgcheck = 0" >> /etc/yum.repos.d/UPDATES.repo

# add 3PP yum repo config
echo "[3PP]" > /etc/yum.repos.d/3PP.repo
echo "name = Third-Party Packages for LITP" >> /etc/yum.repos.d/3PP.repo
echo "baseurl = http://$http_server/3pp_<%= @os_version %>" >> /etc/yum.repos.d/3PP.repo
echo "enabled = 1" >> /etc/yum.repos.d/3PP.repo
echo "gpgcheck = 0" >> /etc/yum.repos.d/3PP.repo

##Purge OOTB yum repos

rm -f /etc/yum.repos.d/rhel-source.repo

setfacl -m u:litp-admin:rw /var/log/messages

#Make user wait 5 seconds before retry failed login
echo "#Make the user waits four seconds if they fail after LOGIN_RETRIES" >> /etc/login.defs
echo "FAIL_DELAY 4" >> /etc/login.defs

rm -f /etc/puppet/puppet.conf
cat << 'EOF' >> /etc/puppet/puppet.conf
[main]
    # The Puppet log directory.
    # The default value is '$vardir/log'.
    logdir = /var/log/puppet

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/run/puppet

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = $vardir/ssl
    pluginsync=true

[agent]
    # The file in which puppetd stores a list of the classes
    # associated with the retrieved configuratiion.  Can be loaded in
    # the separate ``puppet`` executable using the ``--loadclasses``
    # option.
    # The default value is '$confdir/classes.txt'.
    classfile = $vardir/classes.txt
    
    # Puppet 3.3.0 needs this line
    server=<%= @ms_hostname %>

    # Where puppetd caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$confdir/localconfig'.
    localconfig = $vardir/localconfig
    runinterval = 1800
    configtimeout = 1720
    report=true

EOF

# Configuration for COM
cd /usr/lib64/
echo  "/usr/lib64/perl5/CORE" > /etc/ld.so.conf.d/perl.conf
ldconfig

#### LITP customization: create directory for coredumps ####
mkdir -p /var/coredumps
chmod 1777 /var/coredumps

#### LITP customization: Tune kernel parameters ####
cat << 'EOF' >> /etc/sysctl.conf

# LITP customization: core file dumps
# kernel.core_uses_pid = 1
kernel.core_pattern = /var/coredumps/core.%e.pid%p.usr%u.sig%s.tim%t
fs.suid_dumpable = 2
kernel.watchdog_thresh = 60

EOF

#### Add filter to lvm.conf
if [ -f /etc/lvm/lvm.conf ] ; then
    grep -q '    filter = \[ "a\/.*\/" \]' /etc/lvm/lvm.conf
    if (( $? == 0 )) ; then
        cp -f /etc/lvm/lvm.conf /etc/lvm/lvm.conf.orig
        sed -i 's/    filter = \[ "a\/.*\/" \]/    filter = \[ "r\/block\/", "r\/disk\/by-path\/", "r\/disk\/by-uuid\/", "r\/disk\/by-id\/", "a\/.\/" \]/g' /etc/lvm/lvm.conf
    fi
fi

<% if @boot_mode == "uefi" -%>
if [ -f /etc/lvm/lvm.conf ] ; then
    sed -i 's/.*use_lvmetad = 1/\tuse_lvmetad = 0/g' /etc/lvm/lvm.conf
fi
systemctl stop lvm2-lvmetad
systemctl disable lvm2-lvmetad
kver=`rpm -q kernel|sort|head -1`
initramfs=`echo \$kver |sed -e 's/kernel/initramfs/'`.img
dracut -f --lvmconf /boot/\${initramfs} `echo \$kver | sed -e 's/kernel-//'`
<% end -%>

#### LITP customization: core file dumps
echo ''                                                   >> /etc/security/limits.conf
echo '# LITP customization: core file dumps'              >> /etc/security/limits.conf
echo '*               soft    core            unlimited'  >> /etc/security/limits.conf
echo ''                                                   >> /etc/sysconfig/init
echo '# LITP customization: core file dumps'              >> /etc/sysconfig/init
echo 'DAEMON_COREFILE_LIMIT=unlimited'                    >> /etc/sysconfig/init
echo ''                                                   >> /etc/profile
echo '# LITP customization: core file dumps'              >> /etc/profile
echo '# ulimit -c unlimited'                              >> /etc/profile

### Add path for nascli 
cat << 'EOF' >> /etc/profile.d/nascli.sh

PATH=$PATH:/opt/ericsson/storage/bin/
export PATH

EOF


# force change password at first login
chage -d 0 litp-admin
chage -d 0 root

# set minimum password len 9
perl -npe 's/PASS_MIN_LEN\s+5/PASS_MIN_LEN  9/' -i /etc/login.defs

touch /etc/puppet/namespaceauth.conf
chmod 644 /etc/puppet/namespaceauth.conf
echo "allow *" >> /etc/puppet/auth.conf
/usr/bin/echo "server $http_server" >> /etc/ntp.conf
ntpdate -u $http_server
systemctl enable ntpd.service
hwclock --systohc
$SNIPPET('log_ks_post')
# Start yum configuration
rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-*
# End yum configuration
$SNIPPET('post_install_kernel_options')
$SNIPPET('post_install_network_config')
$SNIPPET('download_config_files')
$SNIPPET('koan_environment')

# RHEL 7 - Complete basic netconfig started by cobbler post_install_network_config
# Ensure device name - mac address pairing remains consistent post reboot by adding
# to ifcfg network script here
network_script_path="/etc/sysconfig/network-scripts/ifcfg-"
eth_names=\$(ip link | grep "eth[[:digit:]]" | awk '{print \$2}')
eth_names=\$(echo \${eth_names//:})
for eth in \$eth_names; do
        mac=\$(ip link show \$eth | grep 'link/ether' | awk '{print \$2}')
        if [ ! -f \$network_script_path\$eth ]; then
                touch \$network_script_path\$eth
        fi
        if grep -q "HWADDR=" \$network_script_path\$eth; then
                sed -i "/^HWADDR=/c\HWADDR=\$mac" \$network_script_path\$eth
        else
                echo "HWADDR="\$mac >> \$network_script_path\$eth
        fi
done

# Configure the /etc/systemd/journald.conf to disable rate limiting on logging
JOURNAL_CONF='/etc/systemd/journald.conf'
sed -i -r 's/#RateLimitInterval=[0-9]+/RateLimitInterval=0/' $JOURNAL_CONF
sed -i -r 's/#RateLimitBurst=[0-9]+/RateLimitBurst=0/' $JOURNAL_CONF

# Configure the /etc/rsyslog.conf to disable imjournal/rsyslog rate limiting
RSYSLOG_CONF='/etc/rsyslog.conf'
sed -i '/^$IMJournalStateFile imjournal.state/a $imjournalRatelimitInterval 0\n$imjournalRatelimitBurst 0' $RSYSLOG_CONF

# Dump GRUB2's device mapping for debugging purposes
if [[ -f /boot/grub2/device.map ]]; then
    dmap="/boot/grub2/device.map"
    cat \${dmap}

    grub_info=\$(mktemp)
    while read grub_dev kernel_dev; do
        header="GRUB disk ID \${grub_dev} maps to the following device"
        padding_length=\$(( 4 + \${#header} ))
        separator=\$(printf -- '-%.0s' \$(eval echo {1..\${padding_length}}) )
        echo \${separator} > \${grub_info}
        echo "| \${header} |" >> \${grub_info}
        echo \${separator} >> \${grub_info}
        udevadm info --query=all --name=\${kernel_dev} >> \${grub_info}
        echo \${separator} >> \${grub_info}
    done < \${dmap}

    cat \${grub_info}
    rm \${grub_info}
fi

VIRT_WHAT=\$(/usr/sbin/virt-what)
if [[ $VIRT_WHAT == "vmware" ]]; then
    systemctl disable ksm
    systemctl stop ksm
    systemctl disable ksmtuned
    systemctl stop ksmtuned
    GRUB='/etc/default/grub'
    sed -i  '/^GRUB_CMDLINE_LINUX/ s/"$/transparent_hugepage=never"/' $GRUB
    grub2-mkconfig -o /boot/grub2/grub.cfg
fi

$SNIPPET('cobbler_register')
$SNIPPET('version.snippet')
$SNIPPET($hostname + '.ks.multipath.snippet')
$SNIPPET($hostname + '.ks.udev_network.snippet')
$SNIPPET($hostname + '.ks.vxdmp.snippet')
/usr/bin/echo "$http_server "<%= @ms_hostname %>" puppet" >> /etc/hosts
/usr/bin/echo "PUPPET_SERVER="<%= @ms_hostname %> >> /etc/sysconfig/puppet
$SNIPPET('puppet_register_if_enabled')
# Enable post-install boot notification
$SNIPPET('post_anamon')
# Start final steps
$SNIPPET('kickstart_done')
# End final steps
rm -rf /tmp/ks-script-*
rm -f /tmp/bootloader.info

# Apply high CPU performance profile to Peer Node
/usr/bin/echo "latency-performance" > /etc/tuned/active_profile

%end
