RULES="/etc/udev/rules.d/70-persistent-net.rules"

_rhel_version_=\$( cat /etc/redhat-release )
if ! [[ "\${_rhel_version_}" =~ "6.10" ]] ; then
  dev_name_suffix="_temp"
  rename_nics=true
else
  dev_name_suffix=""
  rename_nics=false
fi

order_devices()
{
  _type_=\$1
  _index_=\$2
  _nics_=()
  for _pciid_ in \$( lspci -D -nn -mm | grep "\${_type_}" | awk '{print \$1}' | tac ) ; do
    _nics_+=( "\$_pciid_" )
  done
  for (( _idx_=\${#_nics_[@]}-1 ; _idx_>=0 ; _idx_-- )) ; do
    echo "ACTION==\"add\", SUBSYSTEM==\"net\", KERNELS==\"\${_nics_[_idx_]}\", NAME:=\"eth\${_index_}\${dev_name_suffix}\"" >> \${RULES}
    ((_index_++))
  done
}

echo "Existence of this file prevents the /lib/udev/rules.d version generation rules" > /etc/udev/rules.d/75-persistent-net-generator.rules

echo "# Generated by Cobbler on \$( date )" > \${RULES}
_spn_=\$( dmidecode -s system-product-name | grep -v "^#" )

if [[ "ProLiant DL360 Gen9" == "\${_spn_}" && \${rename_nics} == true ]] || [[ "ProLiant DL360 Gen10" == "\${_spn_}" ]] ; then
  echo "# Reorder NICs so the 10G nics are listed before the 1G nics" >> \${RULES}
  echo "# (regardless of the Slot the 10G card is in)" >> \${RULES}

  echo ""  >> \${RULES}
  echo "# 10Gb" >> \${RULES}
  order_devices "Ethernet 10Gb" 0

  echo "" >> \${RULES}
  echo "# 1Gb" >> \${RULES}
  order_devices "Ethernet 1Gb" 4

  if [ "\${rename_nics}" = true ] ; then
    UPDATE_NIC_NAMES_EXE="/usr/local/bin/updatenicnames.sh"
    touch "${UPDATE_NIC_NAMES_EXE}"
    cat > ${UPDATE_NIC_NAMES_EXE} <<'EndOfScript'
#!/usr/bin/bash
_num_nics_=\$( lspci -D -nn -mm | grep "Ethernet" | awk '{print \$1}' | wc -l )
for (( i=0; i < ${_num_nics_}; i++ )) do
  ip link set eth${i}_temp down && ip link set eth${i}_temp name eth${i} && ip link set eth${i} up
  if [[ $? -eq 0 ]] ; then
    echo "Ethernet device eth${i}_temp renamed eth${i}" >> /root/postinstall.NIC_reorder.log
  fi
done
EndOfScript
    chmod +x ${UPDATE_NIC_NAMES_EXE}
    if [[ $? -ne 0 ]] ; then
      echo "ERROR: Failed to make ${UPDATE_NIC_NAMES_EXE} executable" >> /root/postinstall.NIC_reorder.log
    fi

    USR_SYS="/usr/local/lib/systemd/system"
    if [[ ! -d ${USR_SYS} ]] ; then
      mkdir -p ${USR_SYS}
    fi

    UPDATE_NIC_NAMES_SVC="litp_update_nic_names.service"
    UPDATE_NIC_NAMES_SVC_UNIT="${USR_SYS}/${UPDATE_NIC_NAMES_SVC}"
    touch "${UPDATE_NIC_NAMES_SVC_UNIT}"
    cat > ${UPDATE_NIC_NAMES_SVC_UNIT} <<END
####
#oneshot service to rename ethernet devices to ethX format
####
[Unit]
Description=Runs ${UPDATE_NIC_NAMES_EXE}
[Service]
Type=oneshot
ExecStart=${UPDATE_NIC_NAMES_EXE}
StandardOutput=journal
[Install]
WantedBy=multi-user.target
END
    ln -s ${UPDATE_NIC_NAMES_SVC_UNIT} /etc/systemd/system/
    if [ $? -ne 0 ] ; then
      echo "ERROR: Setting up softlink for ${UPDATE_NIC_NAMES_SVC_UNIT} failed" >> /root/postinstall.NIC_reorder.log
    fi

    for verb in start enable ; do
      systemctl ${verb} ${UPDATE_NIC_NAMES_SVC}
      if [ $? -ne 0 ] ; then
        echo "ERROR: Failed to ${verb} ${UPDATE_NIC_NAMES_SVC}" >> /root/postinstall.NIC_reorder.log
      fi
    done
  fi
fi

echo "" >> \${RULES}

cat << EOF >> \${RULES}

<% for card in @network_cards %>
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="<%= card['mac'] %>", ATTR{type}=="1", KERNEL=="eth*", NAME="<%= card['dev'] %>"
<% end %>

EOF
